import streamlit as st
import pandas as pd
import altair as alt
import os
from datetime import date

st.set_page_config(page_title="‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö-‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ & ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", layout="wide")

# ---- Initial Session State ----
if "data" not in st.session_state:
    st.session_state.data = pd.DataFrame(columns=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", "‡πÄ‡∏°‡∏ô‡∏π", "‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà"])

# ---- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ----
def get_user_file(username):
    """ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ """
    return f"data_{username}.csv"

def load_user_data(username):
    """ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ """
    file_path = get_user_file(username)
    if os.path.exists(file_path):
        return pd.read_csv(file_path, parse_dates=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"])
    else:
        return pd.DataFrame(columns=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", "‡πÄ‡∏°‡∏ô‡∏π", "‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà"])

def save_user_data(username, df):
    """ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ """
    file_path = get_user_file(username)
    df.to_csv(file_path, index=False)

# ---- Sidebar : ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ----
st.sidebar.title("üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
user_list = [f.split("_")[1].replace(".csv", "") for f in os.listdir() if f.startswith("data_") and f.endswith(".csv")]
selected_user = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", user_list + ["‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà"])

if selected_user == "‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà":
    new_username = st.sidebar.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà")
    if st.sidebar.button("‡∏™‡∏£‡πâ‡∏≤‡∏á"):
        if new_username.strip() != "":
            selected_user = new_username.strip()
            st.session_state.username = selected_user  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô session_state
            st.session_state.data = pd.DataFrame(columns=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢", "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", "‡πÄ‡∏°‡∏ô‡∏π", "‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà"])
            # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ `st.experimental_rerun()`
            st.session_state.selected_user_initialized = True  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ session_state ‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
        else:
            st.sidebar.error("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ!")

if selected_user and selected_user != "‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà":
    if "username" not in st.session_state or st.session_state.username != selected_user:
        st.session_state.username = selected_user
        st.session_state.data = load_user_data(selected_user)

# ---- Sidebar : ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ----
st.sidebar.title("üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")

target_calories = st.sidebar.number_input(
    "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (kcal)", min_value=100, max_value=5000,
    value=st.session_state.get("target_calories", 2000), step=50
)
target_expense = st.sidebar.number_input(
    "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (‡∏ö‡∏≤‡∏ó)", min_value=0, max_value=100000,
    value=st.session_state.get("target_expense", 500), step=50
)

st.session_state.target_calories = target_calories
st.session_state.target_expense = target_expense

# ---- Main Content ----
st.title("üìí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö-‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô")

tab1, tab2, tab3 = st.tabs(["‚ûï ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "üìã ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á", "üìä Dashboard ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"])

# ---- ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏° ----
menu_options = {
    "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ï‡πâ‡∏°‡∏õ‡∏•‡∏≤": 325,
    "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢‡πÑ‡∏Å‡πà": 390,
    "‡∏Å‡∏≤‡πÅ‡∏ü": 180,
    "‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß": 150,
    "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏´‡∏°‡∏π": 450,
    "‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢": 120,
    "‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤": 0,
}

expense_categories = [
    "‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°",
    "‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (‡∏Ñ‡πà‡∏≤‡∏£‡∏ñ/‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô)",
    "‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô",
    "‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏≠‡∏≤‡∏á",
    "‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•",
    "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏)",
]

# ---- Tab 1 : ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ----
with tab1:
    st.subheader("‚ûï ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà")
    with st.form("form_record", clear_on_submit=True):
        col1, col2 = st.columns(2)
        with col1:
            date_input = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=date.today())
            transaction_type = st.radio("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", ["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö", "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"])
            if transaction_type == "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢":
                category = st.selectbox("‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢", expense_categories)
            else:
                category = "-"
            description = st.text_input("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏î‡πâ‡πÄ‡∏≠‡∏á)")
        with col2:
            amount = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)", min_value=0.0, step=1.0)
            menu = st.selectbox("‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", ["-"] + list(menu_options.keys()))
            calories = menu_options.get(menu, 0) if menu != "-" else 0

        submitted = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

        if submitted:
            new_data = pd.DataFrame({
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": [pd.to_datetime(date_input)],
                "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": [transaction_type],
                "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢": [category],
                "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£": [description],
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": [amount],
                "‡πÄ‡∏°‡∏ô‡∏π": [menu],
                "‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà": [calories],
            })

            st.session_state.data = pd.concat([st.session_state.data, new_data], ignore_index=True)
            save_user_data(st.session_state.username, st.session_state.data)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

# ---- Tab 2 : ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ----
with tab2:
    st.subheader("üìã ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á")
    if not st.session_state.data.empty:
        df = st.session_state.data
        df_display = df.sort_values(by="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", ascending=False)
        st.dataframe(df_display, use_container_width=True)

        total_income = df[df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] == "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"]["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"].sum()
        total_expense = df[df["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] == "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"]["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"].sum()

        col1, col2 = st.columns(2)
        col1.metric("üí∞ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°", f"{total_income:,.2f} ‡∏ö‡∏≤‡∏ó")
        col2.metric("üí∏ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏°", f"{total_expense:,.2f} ‡∏ö‡∏≤‡∏ó")
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ")

# ---- Tab 3 : Dashboard ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ----
with tab3:
    st.subheader("üìä Dashboard ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ")
    if not st.session_state.data.empty:
        df = st.session_state.data

        today = pd.to_datetime(date.today())
        df_today = df[df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] == today]

        # --- ‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ---
        st.markdown("### üìÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
        today_calories = df_today["‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà"].sum()
        today_expenses = df_today[df_today["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] == "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"]["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"].sum()

        col1, col2 = st.columns(2)
        col1.metric("üî• ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", f"{today_calories:,.0f} kcal")
        col2.metric("üí∏ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", f"{today_expenses:,.2f} ‡∏ö‡∏≤‡∏ó")

        # --- Progress Bar ---
        percent = min(today_calories / target_calories, 1.0)
        st.progress(percent, text=f"{today_calories:.0f} / {target_calories} kcal")
        if today_calories > target_calories:
            st.error("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ!")
        else:
            st.success("‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö!")

        st.divider()

        # --- ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ---
        st.markdown("### üìÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
        df['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] = df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'].dt.to_period('M')
        this_month = today.to_period('M')
        df_month = df[df['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'] == this_month]

        month_calories = df_month["‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà"].sum()
        month_expenses = df_month[df_month["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] == "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"]["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"].sum()
        month_income = df_month[df_month["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] == "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"]["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"].sum()

        col3, col4, col5 = st.columns(3)
        col3.metric("üî• ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", f"{month_calories:,.0f} kcal")
        col4.metric("üí∏ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", f"{month_expenses:,.2f} ‡∏ö‡∏≤‡∏ó")
        col5.metric("üí∞ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", f"{month_income:,.2f} ‡∏ö‡∏≤‡∏ó")

        # --- ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢-‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö ---
        daily_expenses = df_month[df_month["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] == "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"].groupby("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà").agg({"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": "sum"}).reset_index()
        daily_income = df_month[df_month["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] == "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"].groupby("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà").agg({"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": "sum"}).reset_index()

        st.markdown("### üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
        expense_chart = alt.Chart(daily_expenses).mark_bar(color="skyblue").encode(
            x="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:T",
            y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:Q",
            tooltip=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:T", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:Q"]
        ).properties(width=700, height=400)

        st.altair_chart(expense_chart, use_container_width=True)

        st.markdown("### üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
        income_chart = alt.Chart(daily_income).mark_bar(color="orange").encode(
            x="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:T",
            y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:Q",
            tooltip=["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:T", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:Q"]
        ).properties(width=700, height=400)

        st.altair_chart(income_chart, use_container_width=True)
